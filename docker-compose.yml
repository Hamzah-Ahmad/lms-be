version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: nest_postgres
    ports:
      - '${DB_PORT}:5432'
    environment: # Note below
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data

  nestjs-app:
    build: .
    ports:
      - '3000:3000'
    volumes:
      # Mount source code for hot reloading
      - .:/usr/src/app
      # Prevent node_modules from being overwritten
      - /usr/src/app/node_modules
    env_file: .env
    command: 'npm run start:dev'

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    logging:
      driver: none
      # options:
      #   max-size: "1m"
      #   max-file: "1"

    depends_on:
      - postgres

  # adminer:
  #   image: adminer
  #   depends_on:
  #     - postgres
  #   restart: always
  #   ports:
  #     - 8080:8080

volumes:
  pgdata:

  ## Note:

  ## We can replace   environment: POSTGRES_DB: ${DB_NAME}  POSTGRES_USER: ${DB_USERNAME} POSTGRES_PASSWORD: ${DB_PASSWORD}
  ## with   env_file: .env but the The Postgres container expects specific environment variable names,
  ## like: POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD so we will need to replace the names in the env files to
  # .env POSTGRES_DB=nestjsdb POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres

  ## Steps to connect pgadmin4 to docker db
  # Access it at: http://localhost:5050
  # Add a new server:
  # Host: postgres (Docker service name)
  # Port: 5432
  # Username: your DB user
  # Password: your DB password


## Note: How to avoid pgadmin logs
# Start all containers in detached (silent) mode
# bash
# Copy
# Edit
# docker compose up -d
# This starts all services (postgres, nestjs-app, pgadmin, adminer) without showing logs in your terminal.

# 2. View logs for just your NestJS app
# bash
# Copy
# Edit
# docker compose logs -f nestjs-app
# -f means "follow" (live tail), like tail -f.

# âœ… You'll now see only NestJS logs, nothing from pgAdmin or Adminer.